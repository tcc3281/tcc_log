'use client';

import React, { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '../../context/AuthContext';
import { getAvailableModels, sendChatMessage, ChatMessage } from '../../lib/ai-utils';

const AIPage: React.FC = () => {
  const { user } = useAuth();
  const router = useRouter();
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  const [messages, setMessages] = useState<ChatMessage[]>([
    { role: 'system', content: 'Welcome to AI Assistant! How can I help you today?' }
  ]);
  const [input, setInput] = useState<string>('');
  const [models, setModels] = useState<string[]>([]);
  const [selectedModel, setSelectedModel] = useState<string>('');
  const [isTyping, setIsTyping] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  // Redirect if not logged in
  useEffect(() => {
    if (!user) {
      router.push('/login');
    }
  }, [user, router]);

  // Fetch available models
  useEffect(() => {
    if (!user) return;

    const fetchModels = async () => {
      try {
        const modelList = await getAvailableModels();
        setModels(modelList);
        if (modelList.length > 0) {
          setSelectedModel(modelList[0]);
        }
      } catch (err) {
        console.error('Error fetching models:', err);
      }
    };

    fetchModels();
  }, [user]);

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleSendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!input.trim()) return;
    
    const newUserMessage: ChatMessage = {
      role: 'user',
      content: input.trim(),
      timestamp: new Date()
    };
    
    // Add user message to chat
    setMessages(prev => [...prev, newUserMessage]);
    setInput('');
    setIsTyping(true);
    
    try {
      // Filter out system messages for the API call
      const historyForAPI = messages
        .filter(msg => msg.role !== 'system')
        .map(({ role, content }) => ({ role, content }));
      
      const response = await sendChatMessage(input.trim(), historyForAPI, selectedModel);
      
      const newAssistantMessage: ChatMessage = {
        role: 'assistant',
        content: response.answer,
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, newAssistantMessage]);
    } catch (err) {
      console.error('Error sending message:', err);
      setError('Failed to get a response from the AI. Please try again.');
    } finally {
      setIsTyping(false);
    }
  };

  const handleModelChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedModel(e.target.value);
  };

  if (!user) {
    return null; // Will redirect in useEffect
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-8">AI Assistant</h1>
      
      {error && (
        <div className="mb-6 p-4 bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300 rounded-lg">
          {error}
          <button 
            className="ml-2 font-medium underline"
            onClick={() => setError(null)}
          >
            Dismiss
          </button>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
        {/* Sidebar */}
        <div className="lg:col-span-1">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4 text-gray-800 dark:text-gray-200">
              Model Selection
            </h2>
            <div className="mb-4">
              <label htmlFor="model" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Choose AI Model
              </label>
              <select
                id="model"
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                value={selectedModel}
                onChange={handleModelChange}
              >
                {models.length === 0 && (
                  <option value="">No models available</option>
                )}
                {models.map((model, index) => (
                  <option key={index} value={model}>{model}</option>
                ))}
              </select>
            </div>
            <div className="text-sm text-gray-600 dark:text-gray-400">
              {models.length > 0 ? (
                <p>Using model: <strong>{selectedModel}</strong></p>
              ) : (
                <p>No models found. Please ensure LM Studio is running and has loaded a model.</p>
              )}
            </div>
          </div>

          <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
            <h2 className="text-xl font-semibold mb-4 text-gray-800 dark:text-gray-200">
              Instructions
            </h2>
            <ol className="list-decimal list-inside space-y-2 text-gray-600 dark:text-gray-300">
              <li>Type your question in the chat box</li>
              <li>Press Enter or click Send to submit</li>
              <li>Wait for AI to process and respond</li>
              <li>You can ask follow-up questions</li>
            </ol>
          </div>
        </div>

        {/* Chat Area */}
        <div className="lg:col-span-3">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow flex flex-col h-[600px]">
            {/* Chat Messages */}
            <div className="flex-1 overflow-y-auto p-4">
              {messages.map((message, index) => (
                <div 
                  key={index}
                  className={`mb-4 ${
                    message.role === 'user' 
                      ? 'ml-auto mr-0 max-w-[80%]' 
                      : message.role === 'system'
                      ? 'mx-auto max-w-[90%] text-center'
                      : 'ml-0 mr-auto max-w-[80%]'
                  }`}
                >
                  {message.role === 'system' ? (
                    <div className="bg-blue-50 dark:bg-blue-900/30 rounded-lg p-3">
                      <p className="text-gray-600 dark:text-gray-300">{message.content}</p>
                    </div>
                  ) : message.role === 'user' ? (
                    <div className="bg-blue-500 text-white rounded-lg p-3">
                      <p>{message.content}</p>
                      {message.timestamp && (
                        <p className="text-xs mt-1 text-blue-100">
                          {message.timestamp.toLocaleTimeString()}
                        </p>
                      )}
                    </div>
                  ) : (
                    <div className="bg-gray-100 dark:bg-gray-700 rounded-lg p-3">
                      <p className="text-gray-800 dark:text-gray-200 whitespace-pre-wrap">{message.content}</p>
                      {message.timestamp && (
                        <p className="text-xs mt-1 text-gray-500 dark:text-gray-400">
                          {message.timestamp.toLocaleTimeString()}
                        </p>
                      )}
                    </div>
                  )}
                </div>
              ))}

              {isTyping && (
                <div className="ml-0 mr-auto max-w-[80%]">
                  <div className="bg-gray-100 dark:bg-gray-700 rounded-lg p-3">
                    <div className="flex space-x-2">
                      <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '0ms' }}></div>
                      <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '150ms' }}></div>
                      <div className="w-2 h-2 rounded-full bg-gray-400 animate-bounce" style={{ animationDelay: '300ms' }}></div>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>
            
            {/* Chat Input */}
            <form 
              onSubmit={handleSendMessage}
              className="border-t border-gray-200 dark:border-gray-700 p-4 flex"
            >
              <input
                type="text"
                className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-l-md bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Type your message..."
                value={input}
                onChange={(e) => setInput(e.target.value)}
                disabled={isTyping}
              />
              <button
                type="submit"
                className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-r-md transition-colors disabled:bg-blue-400"
                disabled={isTyping || !input.trim()}
              >
                Send
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AIPage;
