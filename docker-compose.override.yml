# =============================================================================
# TCC LOG - AI-POWERED LEARNING JOURNAL  
# Docker Compose Override for Development
# This file extends docker-compose.yml for development environment
# =============================================================================

version: '3.8'

services:
  # ===== DATABASE SERVICE =====
  postgres:
    ports:
      - "5432:5432"  # Expose PostgreSQL port for external access
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      - POSTGRES_DB=tcc_log_dev
      - POSTGRES_USER=tcc_user_dev
      - POSTGRES_PASSWORD=tcc_pass_dev
    # Enable query logging for development
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c log_min_duration_statement=0
      -c logging_collector=on

  # ===== BACKEND SERVICE =====
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: development  # Use development stage if multi-stage
    volumes:
      # Mount source code for hot reload
      - ./app:/app/app
      - ./tests:/app/tests
      - ./alembic:/app/alembic
      - ./uploads:/app/uploads
      # Mount requirements for development
      - ./requirements-dev.txt:/app/requirements-dev.txt
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - ENABLE_DOCS=true
      - RELOAD=true
    ports:
      - "8000:8000"
      - "5678:5678"  # Debug port for remote debugging
    # Override command for development with auto-reload
    command: >
      uvicorn app.main:app
      --host 0.0.0.0
      --port 8000
      --reload
      --reload-dir app
      --log-level debug
    depends_on:
      - postgres
      - redis

  # ===== FRONTEND SERVICE =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    volumes:
      # Mount source code for hot reload
      - ./frontend/app:/app/app
      - ./frontend/components:/app/components
      - ./frontend/lib:/app/lib
      - ./frontend/public:/app/public
      - ./frontend/styles:/app/styles
      - ./frontend/types:/app/types
      # Exclude node_modules from mount
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true  # Enable file watching in Docker
    ports:
      - "3000:3000"
    # Override command for development mode
    command: npm run dev
    depends_on:
      - backend

  # ===== REDIS SERVICE (for caching and sessions) =====
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    command: redis-server --appendonly yes --appendfsync everysec

  # ===== PGADMIN SERVICE (Database Administration) =====
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@tcclog.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data_dev:/var/lib/pgadmin
    depends_on:
      - postgres

  # ===== MAILHOG SERVICE (Email Testing) =====
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    environment:
      - MH_STORAGE=maildir
      - MH_MAILDIR_PATH=/maildir
    volumes:
      - mailhog_data_dev:/maildir

  # ===== MINIO SERVICE (S3-compatible storage for development) =====
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data_dev:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ===== NGINX SERVICE (Reverse Proxy for development) =====
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/dev.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend

  # ===== PROMETHEUS SERVICE (Monitoring) =====
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus-dev.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_dev:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # ===== GRAFANA SERVICE (Monitoring Dashboard) =====
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data_dev:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus

  # ===== JUPYTER SERVICE (Development notebooks) =====
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/app/notebooks
      - ./app:/app/app
      - ./data:/app/data
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=dev-token-123
    command: >
      jupyter lab
      --ip=0.0.0.0
      --port=8888
      --no-browser
      --allow-root
      --NotebookApp.token='dev-token-123'

# ===== DEVELOPMENT VOLUMES =====
volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  pgadmin_data_dev:
    driver: local
  mailhog_data_dev:
    driver: local
  minio_data_dev:
    driver: local
  prometheus_data_dev:
    driver: local
  grafana_data_dev:
    driver: local

# ===== DEVELOPMENT NETWORKS =====
networks:
  default:
    name: tcc_log_dev_network
    driver: bridge
